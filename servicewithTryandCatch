package com.connection.oracle.repository.serviceImpl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.connection.oracle.entity.Person;
import com.connection.oracle.exception.BusinessException;
import com.connection.oracle.exception.ControllerException;
import com.connection.oracle.repository.service.PersonSpringDataRepository;

@Service
public class PersonDaoServiceImpl {
	@Autowired
	PersonSpringDataRepository repository;

	public List<Person> getAllEmployees() {
		List<Person> list = null;
		try {
			list = repository.findAll();

		}

		catch (Exception e) {
			throw new BusinessException("603", "Something went wrong while fetching the data from DB");
		}
		if (list.isEmpty()) {
			throw new BusinessException("602", "There is no data in DB");
		}
		return list;
	}

	public Person getId(int id) {

		try {
			Optional<Person> p = repository.findById(id);
			return p.get();
		}

		catch (NoSuchElementException e) {
			throw new BusinessException("601", "You have entered the wrong id which does not exist");
		}

	}

	public Person createOrUpdateEmployee(Person entity) {

		Optional<Person> employee = repository.findById(entity.getId());

		if (employee.isPresent()) {
			Person newEntity = employee.get();
			newEntity.setId(entity.getId());
			newEntity.setName(entity.getName());
			newEntity.setLocation(entity.getLocation());
			newEntity.setSalary(entity.getSalary());
			newEntity = repository.save(newEntity);

			return newEntity;
		} else {
			entity = repository.save(entity);

			return entity;
		}
	}

	public void deleteEmployeeById(int id) throws ControllerException {
		{
			try {
				Optional<Person> employee = repository.findById(id);
				if (employee.isPresent())
					repository.deleteById(id);

			} catch (Exception e) {
				throw new BusinessException("604",
						"there is no value to delete with this id , please enter the right id");
			}

		}

	}

	public List<Person> getSalary() {
		List<Person> list = repository.findAll();
		List<Person> list1 = new ArrayList();
		Iterator i = list.iterator();
		while (i.hasNext()) {
			Person p = (Person) i.next();
			if (p.getSalary() > 20000) {
				list1.add(p);

			}

		}
		return list1;

	}

	/*
	 * public Person save1(Person person) { Person p = repository.save(person);
	 * 
	 * return p; }
	 */

}
